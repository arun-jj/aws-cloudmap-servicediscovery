AWSTemplateFormatVersion: 2010-09-09

Description: VPC for services

Parameters:
  VPCName:
    Description: The name of the VPC being created
    Type: String

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Private0:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.3.0/24"

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis). E.g., if the 'b' AZ is not available
  # in a specific region in one's account then updating the
  # list contained in the mapping below here will allow a
  # different AZ to be chosen.
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - ${AWS::Region}${AZ}
          - AZ: !Select [ 0, !FindInMap [ AZRegions, !Ref AWS::Region, AZs ] ]
      CidrBlock: !FindInMap [ SubnetConfig, Private0, CIDR ]
      Tags:
        -
          Key: Application
          Value: !Ref AWS::StackName
        -
          Key: Network
          Value: Private
        -
          Key: Name
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-private-'
              - !Select [ 0, !FindInMap [ AZRegions, !Ref AWS::Region, AZs ] ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - ${AWS::Region}${AZ}
          - AZ: !Select [ 1, !FindInMap [ AZRegions, !Ref AWS::Region, AZs ] ]
      CidrBlock: !FindInMap [ SubnetConfig, Private1, CIDR ]
      Tags:
        -
          Key: Application
          Value: !Ref AWS::StackName
        -
          Key: Network
          Value: Private
        -
          Key: Name
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-private-'
              - !Select [ 1, !FindInMap [ AZRegions, !Ref AWS::Region, AZs ] ]

  PrivateRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${VPCName}-private-route-table-0

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${VPCName}-private-route-table-1

  PrivateSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

Outputs:
  VPCId:
    Description: VPCId of VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-Id

  PrivateSubnet0:
    Description: SubnetId of private subnet 0
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet0

  PrivateSubnet1:
    Description: SubnetId of private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  DefaultSecurityGroup:
    Description: DefaultSecurityGroup Id
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DefaultSecurityGroup
