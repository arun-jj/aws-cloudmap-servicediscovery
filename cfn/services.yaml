AWSTemplateFormatVersion: 2010-09-09

Description: Middleware services deployment in ECS

Parameters:
  ECSClusterStackName:
    Description: The name of middleware ECS cluster stack
    Type: String

  OrderSvcImage:
    Description: The order service docker image
    Type: String

  FulfillmentSvcImage:
    Description: The fulfillment service docker image
    Type: String

  VPCStack:
    Description: The name of VPC stack
    Type: String

Resources:
  OrderTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: order
      NetworkMode: awsvpc # required since we are using FARGATE launch type
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSServiceExecutionRole
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: order-service
          Essential: true
          Image: !Ref OrderSvcImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: order-service
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: order

  FulFillmentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: fulfillment
      NetworkMode: awsvpc # required since we are using FARGATE launch type
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSServiceExecutionRole
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: fulfillment-service
          Essential: true
          Image: !Ref FulfillmentSvcImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: fulfillment-service
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fulfillment

  OrderService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: order
      Cluster:
        Fn::ImportValue: !Sub '${ECSClusterStackName}-MiddlewareClusterName'
      ServiceRegistries:
        - RegistryArn: !GetAtt SDOrderService.Arn
      TaskDefinition: !Ref OrderTaskDefinition
      DesiredCount: 1
      PlatformVersion: 1.4.0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: !Sub ${VPCStack}-PrivateSubnet0
            - Fn::ImportValue: !Sub ${VPCStack}-PrivateSubnet1

  FulFillmentService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: fulfillment
      Cluster:
        Fn::ImportValue: !Sub '${ECSClusterStackName}-MiddlewareClusterName'
      ServiceRegistries:
        - RegistryArn: !GetAtt SDFulfillmentService.Arn
      TaskDefinition: !Ref FulFillmentTaskDefinition
      DesiredCount: 1
      PlatformVersion: 1.4.0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: !Sub ${VPCStack}-PrivateSubnet0
            - Fn::ImportValue: !Sub ${VPCStack}-PrivateSubnet1

  SDNameSpace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: shopping.com
      Vpc:
        Fn::ImportValue: !Sub ${VPCStack}-Id

  SDOrderService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: order
      NamespaceId: !Ref SDNameSpace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10

  SDFulfillmentService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: fulfillment
      NamespaceId: !Ref SDNameSpace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10

  ECSServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ECSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:ListTaskDefinitions
                  - ecs:DescribeTaskDefinition
                  - ecs:CreateService
                  - ecs:DescribeServices
                  - ecs:DeleteService
                  - ecs:DeregisterTaskDefinition
                  - iam:PassRole
                Resource: '*'
        - PolicyName: CloudwatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: MetisECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'

                  # Allow the ECS tasks to register into the target group
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:DescribeTargetGroups'
                  - 'elasticloadbalancing:DescribeTargetHealth'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'
